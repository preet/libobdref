<?xml version="1.0" encoding="UTF-8"?>

<!--  Document Description -->

<!--  Document Sources:

      A list of sources that most of the information in
      this document has been compiled from (please add
      to this list as more data is added).
      
      http://elmelectronics.com/DSheets/ELM327DS.pdf
      http://obddiagnostics.com/obdinfo/msg_struct.html
      http://en.wikipedia.org/wiki/On-board_diagnostics
      http://en.wikipedia.org/wiki/OBD-II_PIDs
      http://freediag.sourceforge.net
      http://www.canobd2.com/Articles/ArticleDisplay.aspx?ArticleId=f3ea9f25589e4bf28f7e980ebefded20&nsl=Tech+Info%2cOBD+Knowledge&ReturnUrl=%2fArticles%2fArticleDisplay.aspx%3fArticleId%3d1efd0812b59d4b189e2420295b377631%26nsl%3dTech%2bInfo%252cOBD%2bKnowledge
      http://www.peak-system.com/produktcd/Pdf/English/PCAN-GPRS_Link_UserMan_eng.pdf
      http://www.drewtech.com/support/obd2/message.html
      https://www.msu.edu/~guentche/guentchev/OBD-II/int-obdii.html
      http://www.ccs-labs.org/teaching/c2x/2012s/03-proto1.pdfâ€Ž

      // a lot of pid,dtc and messaging information is
      // available from the us govt as public domain:
      https://law.resource.org/pub/us/cfr/ibr/005/sae.j1979.2002.pdf
      https://law.resource.org/pub/us/cfr/ibr/005/sae.j2012.2002.pdf
      https://law.resource.org/pub/us/cfr/ibr/005/sae.j2534.2002.pdf
      -->

<spec name="SAEJ1979" desc="OBDII Standard PIDs">
   
   <protocol name="SAE J1850 PWM">
      <baudrate value="41600" />
      <address name="Default">
      <!--  Default J1850 PWM OBD message headers
            for functional request/response from scan tool: -->
            
      <!--  Note: Scan tool might be in range 0xF0-0xFD if
            default 0xF1 doesn't work -->
            
      <!--  Request Params:
            prio:       0x61: Default OBD Request Priority
            target:     0x6A: Functional Request 
            source:     0xF1: External Scan Tool   -->
         <request prio="0x61" target="0x6A" source="0xF1" />
         
      <!--  Response Params:
            prio:       0x41: Default OBD Response Priority
            target:     0x6B: Functional Response -->

         <response prio="0x41" target="0x6B" /> 
      </address>
   </protocol>
   
   <protocol name="SAE J1850 VPW">     
      <baudrate value="10400" />
      <address name="Default">
      <!--  Default J1850 VPW OBD message headers
            for functional request/response from scan tool: -->
            
      <!--  Note: Scan tool might be in range 0xF0-0xFD if
            default 0xF1 doesn't work -->
            
      <!--  Request Params:
            prio:       0x68: Default OBD Request Priority
            target:     0x6A: Functional Request 
            source:     0xF1: External Scan Tool   -->
         <request prio="0x68" target="0x6A" source="0xF1" />
         
      <!--  Response Params:
            prio:       0x48: Default OBD Response Priority
            target:     0x6B: Functional Response -->
         <response prio="0x48" target="0x6B" />
      </address>
   </protocol>
   
   <protocol name="ISO 9141-2">
      <baudrate value="10400" />
      <address name="Default">         
      <!--  Default ISO 9141-2 OBD message headers
            for functional request/response from scan tool: -->
            
      <!--  Note: Scan tool might be in range 0xF0-0xFD if
            default 0xF1 doesn't work -->
            
      <!--  Request Params:
            prio:       0x68: Default OBD Request Priority
            target:     0x6A: Functional Request 
            source:     0xF1: External Scan Tool   -->
         <request prio="0x68" target="0x6A" source="0xF1" />
         
      <!--  Response Params:
            prio:       0x48: Default OBD Response Priority
            target:     0x6B: Functional Response -->
         <response prio="0x48" target="0x6B" />
      </address>
   </protocol>
   
   <protocol name="ISO 14230">
      <baudrate value="10400" />
      <address name="Default">
      <!--  Default ISO 14230-4 OBD message headers
            for functional request/response from scan tool: -->
            
      <!--  ISO 14230-4 uses three header bytes, like
            standard/legacy OBD messages -->
            
      <!--  Note: Scan tool might be in range 0xF0-0xFD if
            default 0xF1 doesn't work -->
            
      <!--  Note: LLLLLL is a 6 bit number representing the
            length of the data byte section of the message  -->
            
      <!--  Request Params:
            format:     0b11LLLLLL: Mode (functional) and data length
            target:     0x33: Functional Request 
            source:     0xF1: External Scan Tool   -->
         <request format="0b11000000" target="0x33" source="0xF1" />
         
      <!--  Response Params:
            format:     0b10LLLLLL: Mode (physical) and data length -->
         <response format="0b10000000" target="0xF1" />
      </address>
   </protocol>
   
   <protocol name="ISO 15765 Extended Id">
      <baudrate value="250000" />
      <baudrate value="500000" />
      <!--  Identifier Format: [prio] [format] [target] [source] -->
      
      <address name="Default">
      <!--  Default ISO 15765 29-bit OBD message identifier
            for functional request/response from scan tool: -->
            
      <!--  Request Params:
            prio:       0x18: Default OBD Request Priority
            format:     0xDB: Functional Message
            target:     0x33: Functional Request
            source:     0xF1: External Scan Tool   -->
         <request prio="0x18" format="0xDB" target="0x33" source="0xF1" />

      <!--  Response Params:
            format:     0xDA: Physical Message  -->
         <response prio="0x18" format="0xDA" target="0xF1" />
      </address>
   </protocol>
   
   <protocol name="ISO 15765 Standard Id">
      <baudrate value="250000" />
      <baudrate value="500000" />
      <!--  Identifier Format: [11-bit identifier] -->
      
      <!--  Note: CAN 11-bit identifiers are not mapped to the
            default "priority,target,source" style header found 
            in typical OBD messages. Instead, they use a single
            address for their identifier, which may represent a
            physical node or functional group -->
            
      <address name="Default">
      <!--  Default ISO 15765 11-bit OBD message identifier
            for functional request from scan tool: -->
      <!--  Request Params:
            identifier: 0x7DF: id for functional request from scan tool -->
         <request identifier="0x7DF" />
      </address>
      
      <!--  Physical Request/Response Identifiers for ECUs
            in the vehicle. 11-bit CAN allows for 8 ECUs in all. -->
      <address name="ECU1">
         <request identifier="0x7E0" />
         <response identifier="0x7E8" />
      </address>
      
      <address name="ECU2">
         <request identifier="0x7E1" />
         <response identifier="0x7E9" />
      </address>
      
      <address name="ECU3">
         <request identifier="0x7E2" />
         <response identifier="0x7EA" />
      </address>
      
      <address name="ECU4">
         <request identifier="0x7E3" />
         <response identifier="0x7EB" />
      </address>
      
      <address name="ECU5">
         <request identifier="0x7E4" />
         <response identifier="0x7EC" />
      </address>
      
      <address name="ECU6">
         <request identifier="0x7E5" />
         <response identifier="0x7ED" />
      </address>
      
      <address name="ECU7">
         <request identifier="0x7E6" />
         <response identifier="0x7EE" />
      </address>
      
      <address name="ECU8">
         <request identifier="0x7E7" />
         <response identifier="0x7EF" />
      </address>
   </protocol>
   
   <parameters address="Default">
		  
      <!-- START MODE $01 PIDs -->
      
      <parameter name="PIDs Supported 0x01-0x20" 
         request="0x01 0x00" response.prefix="0x41 0x00" response.bytes="4">
         <script>
            <![CDATA[  
            var k = 0x01;
            for(var i=0; i < 4; i++)
            {
               for(var j=0; j < 8; j++)
               {
                  var pid = new LiteralDataObj();
                  pid.property = "PID " + k.toString(16);
                  pid.valueIfTrue = "Supported";
                  pid.valueIfFalse = "Unsupported";
                  pid.value = BIT(i,(7-j)) ? true : false;                                 
                  saveLiteralData(pid);
                  k++;
               }
            }
            ]]>
         </script>
      </parameter>
      
      <parameter name="Monitor Status Since DTCs Cleared"
         request="0x01 0x01" response.prefix="0x41 0x01" response.bytes="4">
         <script>
            <![CDATA[
            // number of DTCs available
            
            var availDTCs = new NumericalDataObj();
            availDTCs.min = 0;
            availDTCs.max = 127;
            availDTCs.value = BYTE(0) & 127;
            availDTCs.property = "Number of confirmed DTCs available";
            saveNumericalData(availDTCs);
            
            // common monitoring and system test info
            var litData = new LiteralDataObj();
            litData.property = "Check Engine Light State";  
            litData.valueIfTrue = "ON";          
            litData.valueIfFalse = "OFF";            
            litData.value = (BIT(0,7)) ? true : false;
            saveLiteralData(litData);
            
            var commProperties = ["Misfire","Fuel System","Components"];
            
            for(var i=0; i < 3; i++)
            {
               litData = new LiteralDataObj();
               litData.property = commProperties[i] + " Monitoring";
               litData.valueIfTrue = "Test Available";
               litData.valueIfFalse = "Test Unavailable";            
               litData.value = (BIT(1,i)) ? true : false;
               saveLiteralData(litData);
            }                        
            
            for(var i=4; i < 7; i++)
            {
               litData = new LiteralDataObj();
               litData.property = commProperties[i-4] + " Test Status";
               litData.valueIfTrue = "Complete";      // TODO: verify this
               litData.valueIfFalse = "Incomplete";   // TODO: verify this
               litData.value = (BIT(1,i)) ? true : false;
               saveLiteralData(litData);
            }
            
            litData = new LiteralDataObj();
            litData.property = "Vehicle Ignition Type";
            litData.valueIfTrue = "Compression";
            litData.valueIfFalse = "Spark";
            litData.value = (BIT(1,3)) ? true : false;
            saveLiteralData(litData);  
            
            // compression ignition monitor and test info
            if(BIT(1,3))
            {
               var compProperties = ["NMHC Cat","NOx/SCR Monitor","","Boost Pressure","",
                                    "Exhaust Gas Sensor","PM Filter Monitoring","EGR/VVT System"];
                                    
               for(var i=0; i < 8; i++)
               {
                  if(i == 2 || i == 4)
                  {   continue;   }
                  
                  litData = new LiteralDataObj();
                  litData.property = compProperties[i] + " Test";
                  litData.valueIfTrue = "Test Available";
                  litData.valueIfFalse = "Test Unavailable";
                  litData.value = (BIT(2,i)) ? true : false;
                  saveLiteralData(litData);  
               }
               
               for(var i=0; i < 8; i++)
               {
                  if(i == 2 || i == 4)
                     {   continue;   }
                     
                  litData = new LiteralDataObj();
                  litData.property = compProperties[i] + " Test Status";
                  litData.valueIfTrue = "Incomplete";
                  litData.valueIfFalse = "Complete";
                  litData.value = (BIT(3,i)) ? true : false;
                  saveLiteralData(litData);  
               }
            }
            // spark ignition monitor and test info
            else
            {
               var sparkProperties = ["Catalyst","Heated Catalyst","Evaporative System", "Secondary Air System",
                                      "A/C Refrigerant","Oxygen Sensor","Oxygen Sensor Heater", "EGR System"];
                                      
               for(var i=0; i < 8; i++)
               {
                  litData = new LiteralDataObj();
                  litData.property = sparkProperties[i] + "Test";
                  litData.valueIfTrue = "Test Available";
                  litData.valueIfFalse = "Test Unavailable";
                  litData.value = (BIT(2,i)) ? true : false;
                  saveLiteralData(litData);  
               }
               
               for(var i=0; i < 8; i++)
               {
                  litData = new LiteralDataObj();
                  litData.property = sparkProperties[i] + " Test Status";
                  litData.valueIfTrue = "Incomplete";
                  litData.valueIfFalse = "Complete";
                  litData.value = (BIT(3,i)) ? true : false;
                  saveLiteralData(litData);  
               }
            }     
            ]]>
         </script>
      </parameter>                  
      
      <parameter name="Fuel System Status"
         request="0x01 0x03" response.prefix="0x41 0x03" response.bytes="2">
         <script>
            <![CDATA[
            var fsWhenTrue = ["Open Loop: Insufficient engine temperature",
                              "Closed Loop: Using oxygen sensor feedback to determine fuel mix",
                              "Open Loop: Due to engine load OR fuel cut due to acceleration",
                              "Open Loop: Due to system failure",
                              "Closed loop: Using at least one oxygen sensor but there is a fault in the feedback system"];
                              
            // fuel system 1
            for(var i=0; i < 5; i++)
            {
               if(BIT(0,i))
               {
                  var fuelSysData = new LiteralDataObj();
                  fuelSysData.property = "Fuel System 1 Status";
                  fuelSysData.valueIfTrue = fsWhenTrue[i];
                  fuelSysData.value = true;
                  saveLiteralData(fuelSysData);  
               }
            }
            
            // fuel system 2
            for(var i=0; i < 5; i++)
            {
               if(BIT(1,i))
               {
                  var fuelSysData = new LiteralDataObj();
                  fuelSysData.property = "Fuel System 2 Status";
                  fuelSysData.valueIfTrue = fsWhenTrue[i];
                  fuelSysData.value = true;
                  saveLiteralData(fuelSysData); 
               }
            }            
            ]]>
         </script>
      </parameter>
      
      <parameter name="Calculated Engine Load"
         request="0x01 0x04" response.prefix="0x41 0x04" response.bytes="1">        
         <script>
            <![CDATA[
            var engLoad = new NumericalDataObj();
            engLoad.units = "%";
            engLoad.min = 0;
            engLoad.max = 100;
            engLoad.value = BYTE(0)*100/255;
            saveNumericalData(engLoad);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Engine Coolant Temperature"
         request="0x01 0x05" response.prefix="0x41 0x05" response.bytes="1">
         <script>
            <![CDATA[
            var coolantTemp = new NumericalDataObj();
            coolantTemp.units = "C";
            coolantTemp.min = -40;
            coolantTemp.max = 215;
            coolantTemp.value = BYTE(0)-40;
            saveNumericalData(coolantTemp);
            ]]>
         </script>     
      </parameter>
      
      <parameter name="Short Term Fuel % Trim - Bank 1"
         request="0x01 0x06" response.prefix="0x41 0x06" response.bytes="1">
         <script>
            <![CDATA[
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 100;
            fuelTrim.value = (BYTE(0)-128)*(100/128);
            saveNumericalData(fuelTrim);
            ]]>
         </script>
      </parameter>

      <parameter name="Long Term Fuel % Trim - Bank 1"
         request="0x01 0x07" response.prefix="0x41 0x07" response.bytes="1">        
         <script>
            <![CDATA[
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 100;
            fuelTrim.value = (BYTE(0)-128)*(100/128);
            saveNumericalData(fuelTrim);
            ]]>
         </script>
      </parameter>

      <parameter name="Long Term Fuel % Trim - Bank 2"
         request="0x01 0x08" response.prefix="0x41 0x08" response.bytes="1">        
         <script>
            <![CDATA[
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 100;
            fuelTrim.value = (BYTE(0)-128)*(100/128);
            saveNumericalData(fuelTrim);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Long Term Fuel % Trim - Bank 2"
         request="0x01 0x09" response.prefix="0x41 0x09" response.bytes="1">        
         <script>
            <![CDATA[
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 100;
            fuelTrim.value = (BYTE(0)-128)*(100/128);
            saveNumericalData(fuelTrim);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Fuel Pressure"
         request="0x01 0x0A" response.prefix="0x41 0x0A" response.bytes="1">        
         <script>
            <![CDATA[
            var fuelPr = new NumericalDataObj();
            fuelPr.units = "kPa (gauge)";
            fuelPr.min = 0;
            fuelPr.max = 765;
            fuelPr.value = BYTE(0)*3;
            saveNumericalData(fuelPr);
            ]]>
         </script>
      </parameter>

      <parameter name="Intake Manifold Absolute Pressure"
         request="0x01 0x0B" response.prefix="0x41 0x0B" response.bytes="1">        
         <script>
            <![CDATA[
            var imap = new NumericalDataObj();
            imap.units = "kPa (absolute)";
            imap.min = 0;
            imap.max = 255;
            imap.value = BYTE(0);
            saveNumericalData(imap);
            ]]>
         </script>
      </parameter>

      <parameter name="Engine RPM"
         request="0x01 0x0C" 
         response.prefix="0x41 0x0C" response.bytes="2">
         <script>
            <![CDATA[
            var engSpd = new NumericalDataObj();
            engSpd.units = "rpm";
            engSpd.min = 0;
            engSpd.max = 16383.75;
            engSpd.value = (BYTE(0)*256 + BYTE(1))/4;
            saveNumericalData(engSpd);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Vehicle Speed"
         request="0x01 0x0D" response.prefix="0x41 0x0D" response.bytes="1">
         <script>
            <![CDATA[
            var vSpd = new NumericalDataObj();
            vSpd.units = "km/h";
            vSpd.min = 0;
            vSpd.max = 255;
            vSpd.value = BYTE(0);
            saveNumericalData(vSpd);
            ]]>
         </script>         
      </parameter>
      
      <parameter name="Timing Advance"
         request="0x01 0x0E" response.prefix="0x41 0x0E" response.bytes="1">
         <script>
            <![CDATA[
            var vSpd = new NumericalDataObj();
            vSpd.units = "deg";
            vSpd.min = -64;
            vSpd.max = 63.5;
            vSpd.value = (BYTE(0)/2)-64;
            saveNumericalData(vSpd);
            ]]>
         </script>          
      </parameter>
      
      <parameter name="Intake Air Temperature"
         request="0x01 0x0F" response.prefix="0x41 0x0F" response.bytes="1">
         <script>
            <![CDATA[
            var iat = new NumericalDataObj();
            iat.units = "C";
            iat.min = -40;
            iat.max = 215;
            iat.value = BYTE(0)-40;
            saveNumericalData(iat);
            ]]>
         </script>  
      </parameter>
      
      <parameter name="MAF Air Flow Rate"
         request="0x01 0x10" response.prefix="0x41 0x10" response.bytes="2">
         <script>
            <![CDATA[
            var mafRate = new NumericalDataObj();
            mafRate.units = "g/s";
            mafRate.min = 0;
            mafRate.max = 655.35;
            mafRate.value = (BYTE(0)*256+BYTE(1))/100;
            saveNumericalData(mafRate);
            ]]>
         </script>  
      </parameter>

      <parameter name="Throttle Position"
         request="0x01 0x11" response.prefix="0x41 0x11" response.bytes="1">
         <script>
            <![CDATA[
            var throttle = new NumericalDataObj();
            throttle.units = "%";
            throttle.min = 0;
            throttle.max = 100;
            throttle.value = BYTE(0)*100/255;
            saveNumericalData(throttle);
            ]]>
         </script>  
      </parameter>
      
      <parameter name="Commanded Secondary Air Status"
         request="0x01 0x12" response.prefix="0x41 0x12" response.bytes="1">
         <script>
            <![CDATA[
            var statusIfTrue = ["Upstream of Catalytic Converter",
                                "Downstream of Catalytic Converter", 
                                "From Atmosphere or OFF"];
            for(var i=0; i < 3; i++)
            {
               var airStatus = new LiteralDataObj();
               airStatus.value = BIT(0,i);
               if(airStatus.value)
               {
                  airStatus.property = "Secondary air exhaust input location";
                  airStatus.valueIfTrue = statusIfTrue[i];
                  saveLiteralData(airStatus);
               }
            }
            ]]>
         </script>  
      </parameter>
      
      <parameter name="Oxygen Sensors Present (Banks 1-2)"
         request="0x01 0x13" response.prefix="0x41 0x13" response.bytes="1">
         <script>
            <![CDATA[
            
            for(var i=0; i < 4; i++)
            {
               var oxygenSensor = new LiteralDataObj();
               oxygenSensor.property = "Bank 1, Sensor " + (i+1);
               oxygenSensor.valueIfFalse = "N/A";
               oxygenSensor.valueIfTrue = "Present";
               oxygenSensor.value = BIT(0,i);
               saveLiteralData(oxygenSensor);
            }
            
            for(var i=4; i < 8; i++)
            {
               var oxygenSensor = new LiteralDataObj();
               oxygenSensor.property = "Bank 2, Sensor " + (i-3);
               oxygenSensor.valueIfFalse = "N/A";
               oxygenSensor.valueIfTrue = "Present";
               oxygenSensor.value = BIT(0,i);
               saveLiteralData(oxygenSensor);
            }
            
            ]]>
         </script>  
      </parameter>
      
      <parameter name="Bank 1, Sensor 1: Oxygen Sensor Voltage, Short Term Fuel Trim"
         request="0x01 0x14" response.prefix="0x41 0x14" response.bytes="2">
         <!-- Note: if BYTE(1) == 0xFF, sensor is not used in fuel trim calculation -->
         <script>
            <![CDATA[
            var voltage = new NumericalDataObj();
            voltage.units = "V";
            voltage.min = 0;
            voltage.max = 1.275;
            voltage.value = BYTE(0)/200;
            saveNumericalData(voltage);
            
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 99.2;
            fuelTrim.value = (BYTE(1)-128)*100/128;
            saveNumericalData(fuelTrim);            
            ]]>
         </script> 
      </parameter>

      <parameter name="Bank 1, Sensor 2: Oxygen Sensor Voltage, Short Term Fuel Trim"
         request="0x01 0x15" response.prefix="0x41 0x15" response.bytes="2">
         <!-- Note: if B == 0xFF, sensor is not used in fuel trim calculation -->
         <script>
            <![CDATA[
            var voltage = new NumericalDataObj();
            voltage.units = "V";
            voltage.min = 0;
            voltage.max = 1.275;
            voltage.value = BYTE(0)/200;
            saveNumericalData(voltage);
            
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 99.2;
            fuelTrim.value = (BYTE(1)-128)*100/128;
            saveNumericalData(fuelTrim);            
            ]]>
         </script> 
      </parameter>
      
      <parameter name="Bank 1, Sensor 3: Oxygen Sensor Voltage, Short Term Fuel Trim"
         request="0x01 0x16" response.prefix="0x41 0x16" response.bytes="2">
         <!-- Note: if B == 0xFF, sensor is not used in fuel trim calculation -->
         <script>
            <![CDATA[
            var voltage = new NumericalDataObj();
            voltage.units = "V";
            voltage.min = 0;
            voltage.max = 1.275;
            voltage.value = BYTE(0)/200;
            saveNumericalData(voltage);
            
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 99.2;
            fuelTrim.value = (BYTE(1)-128)*100/128;
            saveNumericalData(fuelTrim);            
            ]]>
         </script> 
      </parameter>
      
      <parameter name="Bank 1, Sensor 4: Oxygen Sensor Voltage, Short Term Fuel Trim"
         request="0x01 0x17" response.prefix="0x41 0x17" response.bytes="2">
         <!-- Note: if B == 0xFF, sensor is not used in fuel trim calculation -->
         <script>
            <![CDATA[
            var voltage = new NumericalDataObj();
            voltage.units = "V";
            voltage.min = 0;
            voltage.max = 1.275;
            voltage.value = BYTE(0)/200;
            saveNumericalData(voltage);
            
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 99.2;
            fuelTrim.value = (BYTE(1)-128)*100/128;
            saveNumericalData(fuelTrim);            
            ]]>
         </script> 
      </parameter>
      
      <parameter name="Bank 2, Sensor 1: Oxygen Sensor Voltage, Short Term Fuel Trim"
         request="0x01 0x18" response.prefix="0x41 0x18" response.bytes="2">
         <!-- Note: if B == 0xFF, sensor is not used in fuel trim calculation -->
         <script>
            <![CDATA[
            var voltage = new NumericalDataObj();
            voltage.units = "V";
            voltage.min = 0;
            voltage.max = 1.275;
            voltage.value = BYTE(0)/200;
            saveNumericalData(voltage);
            
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 99.2;
            fuelTrim.value = (BYTE(1)-128)*100/128;
            saveNumericalData(fuelTrim);            
            ]]>
         </script> 
      </parameter>
      
      <parameter name="Bank 2, Sensor 2: Oxygen Sensor Voltage, Short Term Fuel Trim"
         request="0x01 0x19" response.prefix="0x41 0x19" response.bytes="2">
         <!-- Note: if B == 0xFF, sensor is not used in fuel trim calculation -->
         <script>
            <![CDATA[
            var voltage = new NumericalDataObj();
            voltage.units = "V";
            voltage.min = 0;
            voltage.max = 1.275;
            voltage.value = BYTE(0)/200;
            saveNumericalData(voltage);
            
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 99.2;
            fuelTrim.value = (BYTE(1)-128)*100/128;
            saveNumericalData(fuelTrim);            
            ]]>
         </script> 
      </parameter>
      
      <parameter name="Bank 2, Sensor 3: Oxygen Sensor Voltage, Short Term Fuel Trim"
         request="0x01 0x1A" response.prefix="0x41 0x1A" response.bytes="2">
         <!-- Note: if B == 0xFF, sensor is not used in fuel trim calculation -->
         <script>
            <![CDATA[
            var voltage = new NumericalDataObj();
            voltage.units = "V";
            voltage.min = 0;
            voltage.max = 1.275;
            voltage.value = BYTE(0)/200;
            saveNumericalData(voltage);
            
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 99.2;
            fuelTrim.value = (BYTE(1)-128)*100/128;
            saveNumericalData(fuelTrim);            
            ]]>
         </script>
      </parameter>
      
      <parameter name="Bank 2, Sensor 4: Oxygen Sensor Voltage, Short Term Fuel Trim"
         request="0x01 0x1B" response.prefix="0x41 0x1B" response.bytes="2">
         <!-- Note: if B == 0xFF, sensor is not used in fuel trim calculation -->
         <script>
            <![CDATA[
            var voltage = new NumericalDataObj();
            voltage.units = "V";
            voltage.min = 0;
            voltage.max = 1.275;
            voltage.value = BYTE(0)/200;
            saveNumericalData(voltage);
            
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 99.2;
            fuelTrim.value = (BYTE(1)-128)*100/128;
            saveNumericalData(fuelTrim);            
            ]]>
         </script>
      </parameter>      
      
      <parameter name="OBD Standards This Vehicle Conforms To"
         request="0x01 0x1C" response.prefix="0x41 0x18" response.bytes="1">
         <script>
            <![CDATA[
            var obdStd = new LiteralDataObj();
            obdStd.value = true;
            switch(BYTE(0))
            {
               case 0x01:
                  obdStd.valueIfTrue = "OBDII as defined by the CARB";
                  break;
               case 0x02:
                  obdStd.valueIfTrue = "OBD as defined by the EPA";
                  break;
               case 0x03:
                  obdStd.valueIfTrue = "OBD and OBDII";
                  break;
               case 0x04:
                  obdStd.valueIfTrue = "OBDI";
                  break;
               case 0x05:
                  obdStd.valueIfTrue = "Does not comply with any OBD Standard";
                  break;
               case 0x06:
                  obdStd.valueIfTrue = "EOBD (Europe)";
                  break;
               case 0x07:
                  obdStd.valueIfTrue = "EOBD and OBDII";
                  break;
               case 0x08:
                  obdStd.valueIfTrue = "EOBD and OBD";
                  break;
               case 0x09:
                  obdStd.valueIfTrue = "EOBD, OBD and OBDII";
                  break;
               case 0x0A:
                  obdStd.valueIfTrue = "JOBD (Japan)";
                  break;
               case 0x0B:
                  obdStd.valueIfTrue = "JOBD and OBDII";
                  break;
               case 0x0C:
                  obdStd.valueIfTrue = "JOBD and EOBD";
                  break;
               case 0x0D:
                  obdStd.valueIfTrue = "JOBD, EOBD, and OBDII";
                  break;
               default:
                  obdStd.value = false;
            }
            saveLiteralData(obdStd);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Oxygen Sensors Present (Banks 1-4)"
         request="0x01 0x1D" response.prefix="0x41 0x1D" response.bytes="1">
         <script>
            <![CDATA[
            for(var i=0; i < 8; i++)
            {
               var oxygenSensor = new LiteralDataObj();
               oxygenSensor.valueIfFalse = "N/A";
               oxygenSensor.valueIfTrue = "Present";
               oxygenSensor.value = BIT(0,i);
            
               if(i < 2)
               {   oxygenSensor.property = "Bank 1, Sensor " + (i+1);   }
               
               else if(i > 1 && i < 4)
               {   oxygenSensor.property = "Bank 2, Sensor " + (i+1-2);   }
               
               else if(i > 3 && i < 6)
               {   oxygenSensor.property = "Bank 3, Sensor " + (i+1-4);   }
               
               else if(i > 5 && i < 8)
               {   oxygenSensor.property = "Bank 4, Sensor " + (i+1-6);   }
                              
               saveLiteralData(oxygenSensor);
            }            
            ]]>
         </script> 
      </parameter>
      
      <parameter name="Auxiliary Input Status"
         request="0x01 0x1E" response.prefix="0x41 0x1E" response.bytes="1">
         <script>
            <![CDATA[
            if(BIT(0,0))
            {
               var auxIn = new LiteralDataObj();
               auxIn.value = true;
               auxIn.valueIfTrue = "Power Take Off Active";
               saveLiteralData(auxIn);
            }
            ]]>
         </script>          
      </parameter>
      
      <parameter name="Runtime Since Engine Start"
         request="0x01 0x1F" response.prefix="0x41 0x1F" response.bytes="2">
         <script>
            <![CDATA[
            var runTime = new NumericalDataObj();
            runTime.units = "seconds";
            runTime.min = 0;
            runTime.max = 65535;
            runTime.value = (BYTE(0)*256) + BYTE(1);
            saveNumericalData(runTime);
            ]]>
         </script>   
      </parameter>
      
      <parameter name="PIDs Supported 0x21-0x40"
         request="0x01 0x20" response.prefix="0x41 0x20" response.bytes="4">
         <script>
            <![CDATA[  
            var k = 0x21;
            for(var i=0; i < 4; i++)
            {
               for(var j=0; j < 8; j++)
               {
                  var pid = new LiteralDataObj();
                  pid.property = "PID " + k.toString(16);
                  pid.valueIfTrue = "Supported";
                  pid.valueIfFalse = "Unsupported";
                  pid.value = BIT(i,(7-j)) ? true : false;                                 
                  saveLiteralData(pid);
                  k++;
               }
            }
            ]]>
         </script>
      </parameter>
      
      <parameter name="Distance Travelled with MIL On"
         request="0x01 0x21" response.prefix="0x41 0x21" response.bytes="2">
         <script>
            <![CDATA[
            var dist = new NumericalDataObj();
            dist.units = "km";
            dist.min = 0;
            dist.max = 65535;
            dist.value = (BYTE(0)*256) + BYTE(1);
            saveNumericalData(dist);
            ]]>
         </script>
      </parameter>

      <parameter name="Fuel Rail Pressure"
         request="0x01 0x22" response.prefix="0x41 0x22" response.bytes="2">
         <script>
            <![CDATA[
            var fuelRail = new NumericalDataObj();
            fuelRail.units="kPa";
            fuelRail.min = 0;
            fuelRail.max = 5177.265;
            fuelRail.value = ((BYTE(0)*256)+BYTE(1))*10/128;
            saveNumericalData(fuelRail);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Fuel Rail Pressure (Diesel or Gasoline Direct Injection)"
         request="0x01 0x23" response.prefix="0x41 0x23" response.bytes="2">
         <script>
            <![CDATA[
            var fuelRail = new NumericalDataObj();
            fuelRail.units="kPa";
            fuelRail.min = 0;
            fuelRail.max = 5177.265;
            fuelRail.value = ((BYTE(0)*256)+BYTE(1))*10;
            saveNumericalData(fuelRail);            
            ]]>
         </script>
      </parameter>

      <parameter name="O2S1_WR_lambda(1): Equivalence Ratio, Voltage"
         request="0x01 0x24" response.prefix="0x41 0x23" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio"
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))*2/65535;
            saveNumericalData(ratio);
            
            var voltage = new NumericalDataObj();
            voltage.units = "V"
            voltage.min = 0;
            voltage.max = 8;
            voltage.value = ((BYTE(2)*256)+BYTE(3))*8/65535;
            saveNumericalData(voltage);
            ]]>
         </script>
      </parameter>
      
      <parameter name="O2S2_WR_lambda(1): Equivalence Ratio, Voltage"
         request="0x01 0x25" response.prefix="0x41 0x25" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio"
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))*2/65535;
            saveNumericalData(ratio);
            
            var voltage = new NumericalDataObj();
            voltage.units = "V"
            voltage.min = 0;
            voltage.max = 8;
            voltage.value = ((BYTE(2)*256)+BYTE(3))*8/65535;
            saveNumericalData(voltage);
            ]]>
         </script>
      </parameter>
      
      <parameter name="O2S3_WR_lambda(1): Equivalence Ratio, Voltage"
         request="0x01 0x26" response.prefix="0x41 0x26" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio"
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))*2/65535;
            saveNumericalData(ratio);
            
            var voltage = new NumericalDataObj();
            voltage.units = "V"
            voltage.min = 0;
            voltage.max = 8;
            voltage.value = ((BYTE(2)*256)+BYTE(3))*8/65535;
            saveNumericalData(voltage);
            ]]>
         </script>
      </parameter>
      
      <parameter name="O2S4_WR_lambda(1): Equivalence Ratio, Voltage"
         request="0x01 0x27" response.prefix="0x41 0x27" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio"
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))*2/65535;
            saveNumericalData(ratio);
            
            var voltage = new NumericalDataObj();
            voltage.units = "V"
            voltage.min = 0;
            voltage.max = 8;
            voltage.value = ((BYTE(2)*256)+BYTE(3))*8/65535;
            saveNumericalData(voltage);
            ]]>
         </script>
      </parameter>
      
      <parameter name="O2S5_WR_lambda(1): Equivalence Ratio, Voltage"
         request="0x01 0x28" response.prefix="0x41 0x28" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio"
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))*2/65535;
            saveNumericalData(ratio);
            
            var voltage = new NumericalDataObj();
            voltage.units = "V"
            voltage.min = 0;
            voltage.max = 8;
            voltage.value = ((BYTE(2)*256)+BYTE(3))*8/65535;
            saveNumericalData(voltage);
            ]]>
         </script>
      </parameter>
      
      <parameter name="O2S6_WR_lambda(1): Equivalence Ratio, Voltage"
         request="0x01 0x29" response.prefix="0x41 0x29" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio"
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))*2/65535;
            saveNumericalData(ratio);
            
            var voltage = new NumericalDataObj();
            voltage.units = "V"
            voltage.min = 0;
            voltage.max = 8;
            voltage.value = ((BYTE(2)*256)+BYTE(3))*8/65535;
            saveNumericalData(voltage);
            ]]>
         </script>
      </parameter>
      
      <parameter name="O2S7_WR_lambda(1): Equivalence Ratio, Voltage"
         request="0x01 0x2A" response.prefix="0x41 0x2A" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio"
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))*2/65535;
            saveNumericalData(ratio);
            
            var voltage = new NumericalDataObj();
            voltage.units = "V"
            voltage.min = 0;
            voltage.max = 8;
            voltage.value = ((BYTE(2)*256)+BYTE(3))*8/65535;
            saveNumericalData(voltage);
            ]]>
         </script>
      </parameter>
      
      <parameter name="O2S8_WR_lambda(1): Equivalence Ratio, Voltage"
         request="0x01 0x2B" response.prefix="0x41 0x2B" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio"
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))*2/65535;
            saveNumericalData(ratio);
            
            var voltage = new NumericalDataObj();
            voltage.units = "V"
            voltage.min = 0;
            voltage.max = 8;
            voltage.value = ((BYTE(2)*256)+BYTE(3))*8/65535;
            saveNumericalData(voltage);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Commanded EGR"
         request="0x01 0x2C" response.prefix="0x41 0x2C" response.bytes="1">
         <script>
            <![CDATA[
            var egrCmd = new NumericalDataObj();
            egrCmd.units = "%";
            egrCmd.min = 0;
            egrCmd.max = 100;
            egrCmd.value = BYTE(0)*100/255;
            saveNumericalData(egrCmd);
            ]]>
         </script>
      </parameter>
      
      <parameter name="EGR Error"
         request="0x01 0x2D" response.prefix="0x41 0x2D" response.bytes="1">
         <script>
            <![CDATA[
            var egrError = new NumericalDataObj();
            egrError.units = "%";
            egrError.min = -100;
            egrError.max = 99.2;
            egrError.value = (BYTE(0)-128)*100/128;
            saveNumericalData(egrError);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Commanded Evaporative Purge"
         request="0x01 0x2E" response.prefix="0x41 0x2E" response.bytes="1">
         <script>
            <![CDATA[
            var evap = new NumericalDataObj();
            evap.units = "%";
            evap.min = 0;
            evap.max = 100;
            evap.value = BYTE(0)*100/255;
            saveNumericalData(evap);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Fuel Level Input"
         request="0x01 0x2F" response.prefix="0x41 0x2F" response.bytes="1">
         <script>
            <![CDATA[
            var fuelLevel = new NumericalDataObj();
            fuelLevel.units = "%";
            fuelLevel.min = 0;
            fuelLevel.max = 100;
            fuelLevel.value = BYTE(0)*100/255;
            saveNumericalData(fuelLevel);
            ]]>
         </script>
      </parameter>

      <parameter name="Number of Warm Ups Since Codes Cleared"
         request="0x01 0x30" response.prefix="0x41 0x30" response.bytes="1">
         <script>
            <![CDATA[
            var numData = new NumericalDataObj();
            numData.units = "number";
            numData.min = 0;
            numData.max = 255;
            numData.value = BYTE(0);
            saveNumericalData(numData);
            ]]>
         </script>
      </parameter>

      <parameter name="Distance Traveled Since Codes Cleared"
         request="0x01 0x31" response.prefix="0x41 0x31" response.bytes="2">
         <script>
            <![CDATA[
            var numData = new NumericalDataObj();
            numData.units = "km";
            numData.min = 0;
            numData.max = 65535;
            numData.value = (BYTE(0)*256)+BYTE(1);
            saveNumericalData(numData);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Evaporative System Vapour Pressure (1)"
         request="0x01 0x32" response.prefix="0x41 0x32" response.bytes="2">
         <!--  BYTE(0) is signed with (I THINK) 2's complement -- needs to be VERIFIED
               min, max are different than values listed on Wikipedia since they don't
               make sense to me if the value is signed with 2's complement  -->
         <script>
            <![CDATA[
            var numData = new NumericalDataObj();
            numData.units = "Pa";
            numData.min = -8192;
            numData.max = 8192;
            if(BIT(0,7))      // negative?
            {   numData.value = (((~(BYTE(0)-1))*256)+BYTE(1))/4;   }
            else              // positive?
            {   numData.value = ((BYTE(0)*256)+BYTE(1))/4;   }
            saveNumericalData(numData);
            ]]>
         </script>
      </parameter>

      <parameter name="Barometric Pressure"
         request="0x01 0x33" response.prefix="0x41 0x33" response.bytes="1">
         <script>
            <![CDATA[
            var numData = new NumericalDataObj();
            numData.units = "kPa";
            numData.min = 0;
            numData.max = 255;
            numData.value = BYTE(0);
            saveNumericalData(numData);
            ]]>
         </script>
      </parameter>
            
      <parameter name="O2S1_WR_lambda(1): Equivalence Ratio, Current"
         request="0x01 0x34" response.prefix="0x41 0x34" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio";
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))/32768;
            saveNumericalData(ratio);
            
            var current = new NumericalDataObj();
            current.units = "mA";
            current.min = -128;
            current.max = 128;
            current.value = ((BYTE(2)*256)+BYTE(3))/256-128;
            saveNumericalData(current);
            ]]>
         </script>
      </parameter>

      <parameter name="O2S2_WR_lambda(1): Equivalence Ratio, Current"
         request="0x01 0x35" response.prefix="0x41 0x35" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio";
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))/32768;
            saveNumericalData(ratio);
            
            var current = new NumericalDataObj();
            current.units = "mA";
            current.min = -128;
            current.max = 128;
            current.value = ((BYTE(2)*256)+BYTE(3))/256-128;
            saveNumericalData(current);
            ]]>
         </script>
      </parameter>

      <parameter name="O2S3_WR_lambda(1): Equivalence Ratio, Current"
         request="0x01 0x36" response.prefix="0x41 0x36" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio";
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))/32768;
            saveNumericalData(ratio);
            
            var current = new NumericalDataObj();
            current.units = "mA";
            current.min = -128;
            current.max = 128;
            current.value = ((BYTE(2)*256)+BYTE(3))/256-128;
            ]]>
         </script>
      </parameter>

      <parameter name="O2S4_WR_lambda(1): Equivalence Ratio, Current"
         request="0x01 0x37" response.prefix="0x41 0x37" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio";
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))/32768;
            saveNumericalData(ratio);
            
            var current = new NumericalDataObj();
            current.units = "mA";
            current.min = -128;
            current.max = 128;
            current.value = ((BYTE(2)*256)+BYTE(3))/256-128;
            saveNumericalData(current);
            ]]>
         </script>
      </parameter>
      
      <parameter name="O2S5_WR_lambda(1): Equivalence Ratio, Current"
         request="0x01 0x38" response.prefix="0x41 0x38" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio";
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))/32768;
            saveNumericalData(ratio);
            
            var current = new NumericalDataObj();
            current.units = "mA";
            current.min = -128;
            current.max = 128;
            current.value = ((BYTE(2)*256)+BYTE(3))/256-128;
            saveNumericalData(current);
            ]]>
         </script>
      </parameter>
      
      <parameter name="O2S6_WR_lambda(1): Equivalence Ratio, Current"
         request="0x01 0x39" response.prefix="0x41 0x39" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio";
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))/32768;
            saveNumericalData(ratio);
            
            var current = new NumericalDataObj();
            current.units = "mA";
            current.min = -128;
            current.max = 128;
            current.value = ((BYTE(2)*256)+BYTE(3))/256-128;
            saveNumericalData(current);
            ]]>
         </script>
      </parameter>
      
      <parameter name="O2S7_WR_lambda(1): Equivalence Ratio, Current"
         request="0x01 0x3A" response.prefix="0x41 0x3A" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio";
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))/32768;
            saveNumericalData(ratio);
            
            var current = new NumericalDataObj();
            current.units = "mA";
            current.min = -128;
            current.max = 128;
            current.value = ((BYTE(2)*256)+BYTE(3))/256-128;
            saveNumericalData(current);
            ]]>
         </script>
      </parameter>
      
      <parameter name="O2S8_WR_lambda(1): Equivalence Ratio, Current"
         request="0x01 0x3B" response.prefix="0x41 0x3B" response.bytes="4">
         <script>
            <![CDATA[
            var ratio = new NumericalDataObj();
            ratio.units = "ratio";
            ratio.min = 0;
            ratio.max = 2;
            ratio.value = ((BYTE(0)*256)+BYTE(1))/32768;
            saveNumericalData(ratio);
            
            var current = new NumericalDataObj();
            current.units = "mA";
            current.min = -128;
            current.max = 128;
            current.value = ((BYTE(2)*256)+BYTE(3))/256-128;
            saveNumericalData(current);
            ]]>
         </script>
      </parameter>

      <parameter name="Catalyst Temperature Bank 1, Sensor 1"
         request="0x01 0x3C" response.prefix="0x41 0x3C" response.bytes="2">
         <script>
            <![CDATA[
            var catalystTemp = new NumericalDataObj();
            catalystTemp.units = "C";
            catalystTemp.min = -40;
            catalystTemp.max = 6513.5;
            catalystTemp.value = ((BYTE(0)*256)+BYTE(1))/10-40;
            saveNumericalData(catalystTemp);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Catalyst Temperature Bank 2, Sensor 1"
         request="0x01 0x3D" response.prefix="0x41 0x3D" response.bytes="2">
         <script>
            <![CDATA[
            var catalystTemp = new NumericalDataObj();
            catalystTemp.units = "C";
            catalystTemp.min = -40;
            catalystTemp.max = 6513.5;
            catalystTemp.value = ((BYTE(0)*256)+BYTE(1))/10-40;
            saveNumericalData(catalystTemp);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Catalyst Temperature Bank 1, Sensor 2"
         request="0x01 0x3E" response.prefix="0x41 0x3E" response.bytes="2">
         <script>
            <![CDATA[
            var catalystTemp = new NumericalDataObj();
            catalystTemp.units = "C";
            catalystTemp.min = -40;
            catalystTemp.max = 6513.5;
            catalystTemp.value = ((BYTE(0)*256)+BYTE(1))/10-40;
            saveNumericalData(catalystTemp);
            ]]>
         </script>
      </parameter>

      <parameter name="Catalyst Temperature Bank 2, Sensor 2"
         request="0x01 0x3F" response.prefix="0x41 0x3F" response.bytes="2">
         <script>
            <![CDATA[
            var catalystTemp = new NumericalDataObj();
            catalystTemp.units = "C";
            catalystTemp.min = -40;
            catalystTemp.max = 6513.5;
            catalystTemp.value = ((BYTE(0)*256)+BYTE(1))/10-40;
            saveNumericalData(catalystTemp);
            ]]>
         </script>
      </parameter>
      
      <parameter name="PIDs Supported 0x41-0x60"
         request="0x01 0x40" response.prefix="0x41 0x40" response.bytes="2">
         <script>
            <![CDATA[  
            var k = 0x41;
            for(var i=0; i < 4; i++)
            {
               for(var j=0; j < 8; j++)
               {
                  var pid = new LiteralDataObj();
                  pid.property = "PID " + k.toString(16);
                  pid.valueIfTrue = "Supported";
                  pid.valueIfFalse = "Unsupported";
                  pid.value = BIT(i,(7-j)) ? true : false;                                 
                  saveLiteralData(pid);
                  k++;
               }
            }
            ]]>
         </script>         
      </parameter>
      
      <parameter name="Monitor Status this Drive Cycle"
         request="0x01 0x41" response.prefix="0x41 0x41" response.bytes="2">
         <script>
            <![CDATA[
            
            // BYTE(1) represents continuous monitoring tests
            var listProperties = ["Misfire","Fuel System","Component"];
            for(var i=0; i < 7; i++)
            {
               if(!(i == 3 || i > 6))
               {
                  var litData = new LiteralDataObj();
                  if(i < 3)
                  {
                     litData.property = listProperties[i] + " Monitoring";
                     litData.valueIfTrue = "Enabled";
                     litData.valueIfFalse = "Disabled";
                  }
                  else
                  {   
                     litData.property = listProperties[i-4] + " Test Status";
                     litData.valueIfTrue = "Incomplete";
                     litData.valueIfFalse = "Complete"; 
                  }
                  litData.value = BIT(1,i);
                  saveLiteralData(litData);
               }
            }
            // BYTE(2) and BYTE(3) represent non-continuous monitoring tests
            listProperties = ["Catalyst","Heated Catalyst","Evaporative","Secondary Air",
                              "A/C Refrigerant","Oxygen Sensor","Oxygen Sensor Heater", "EGR System"];
            for(var i=0; i < 8; i++)
            {
               var litData1 = new LiteralDataObj();
               litData1.property = listProperties[i] + " Test";
               litData1.valueIfTrue = "Enabled";
               litData1.valueIfFalse = "Disabled";
               litData1.value = BIT(2,i);
               saveLiteralData(litData1);
               
               var litData2 = new LiteralDataObj();
               litData2.property = listProperties[i] + " Test Status";
               litData2.valueIfFalse = "Incomplete";
               litData2.valueIfTrue = "Complete";
               litData2.value = BIT(3,i);
               saveLiteralData(litData2);
            }
            
            ]]>
         </script>
      </parameter>

      <parameter name="Control Module Voltage"
         request="0x01 0x42" response.prefix="0x41 0x42" response.bytes="2">
         <script>
            <![CDATA[
            var cmVoltage = new NumericalDataObj();
            cmVoltage.units = "V";
            cmVoltage.min = 0;
            cmVoltage.max = 65.535;
            cmVoltage.value = ((BYTE(0)*256)+BYTE(1))/1000;
            saveNumericalData(cmVoltage);
            ]]>
         </script>
      </parameter>

      <parameter name="Absolute Load Value"
         request="0x01 0x43" response.prefix="0x41 0x43" response.bytes="2">
         <script>
            <![CDATA[
            var loadVal = new NumericalDataObj();
            loadVal.units = "%";
            loadVal.min = 0;
            loadVal.max = 25700;
            loadVal.value = ((BYTE(0)*256)+BYTE(1))*100/255;
            saveNumericalData(loadVal);
            ]]>
         </script>
      </parameter>

      <parameter name="Command Equivalence Ratio"
         request="0x01 0x44" response.prefix="0x41 0x44" response.bytes="2">
         <script>
            <![CDATA[
            var cmdRatio = new NumericalDataObj();
            cmdRatio.units = "ratio";
            cmdRatio.min = 0;
            cmdRatio.max = 2;
            cmdRatio.value = ((BYTE(0)*256)+BYTE(1))/32768;
            saveNumericalData(cmdRatio);
            ]]>
         </script>
      </parameter>

      <parameter name="Relative Throttle Position"
         request="0x01 0x45" response.prefix="0x41 0x45" response.bytes="1">
         <script>
            <![CDATA[
            var relThrottle = new NumericalDataObj();
            relThrottle.units = "%";
            relThrottle.min = 0;
            relThrottle.max = 100;
            relThrottle.value = BYTE(0)*100/255;
            saveNumericalData(relThrottle);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Ambient Air Temperature"
         request="0x01 0x46" response.prefix="0x41 0x46" response.bytes="1">
         <script>
            <![CDATA[
               var ambAirTemp = new NumericalDataObj();
               ambAirTemp.units = "C";
               ambAirTemp.min = -40;
               ambAirTemp.max = 215;
               ambAirTemp.value = BYTE(0)-40;
               saveNumericalData(ambAirTemp);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Absolute Throttle Position B"
         request="0x01 0x47" response.prefix="0x41 0x47" response.bytes="1">
         <script>
            <![CDATA[
               var absThrottle = new NumericalDataObj();
               absThrottle.units = "%";
               absThrottle.min = 0;
               absThrottle.max = 100;
               absThrottle.value = BYTE(0)*100/255;
               saveNumericalData(absThrottle);
            ]]>
         </script>
      </parameter>

      <parameter name="Absolute Throttle Position C"
         request="0x01 0x48" response.prefix="0x41 0x48" response.bytes="1">
         <script>
            <![CDATA[
               var absThrottle = new NumericalDataObj();
               absThrottle.units = "%";
               absThrottle.min = 0;
               absThrottle.max = 100;
               absThrottle.value = BYTE(0)*100/255;
               saveNumericalData(absThrottle);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Absolute Throttle Position D"
         request="0x01 0x49" response.prefix="0x41 0x49" response.bytes="1">
         <script>
            <![CDATA[
               var absThrottle = new NumericalDataObj();
               absThrottle.units = "%";
               absThrottle.min = 0;
               absThrottle.max = 100;
               absThrottle.value = BYTE(0)*100/255;
               saveNumericalData(absThrottle);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Absolute Throttle Position E"
         request="0x01 0x4A" response.prefix="0x41 0x4A" response.bytes="1">
         <script>
            <![CDATA[
               var absThrottle = new NumericalDataObj();
               absThrottle.units = "%";
               absThrottle.min = 0;
               absThrottle.max = 100;
               absThrottle.value = BYTE(0)*100/255;
               saveNumericalData(absThrottle);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Absolute Throttle Position F"
         request="0x01 0x4B" response.prefix="0x41 0x4B" response.bytes="1">
         <script>
            <![CDATA[
               var absThrottle = new NumericalDataObj();
               absThrottle.units = "%";
               absThrottle.min = 0;
               absThrottle.max = 100;
               absThrottle.value = BYTE(0)*100/255;
               saveNumericalData(absThrottle);
            ]]>
         </script>
      </parameter>

      <parameter name="Commanded Throttle Actuator"
         request="0x01 0x4C" response.prefix="0x41 0x4C" response.bytes="1">
         <script>
            <![CDATA[
               var cmdThrottle = new NumericalDataObj();
               cmdThrottle.units = "%";
               cmdThrottle.min = 0;
               cmdThrottle.max = 100;
               cmdThrottle.value = BYTE(0)*100/255;
               saveNumericalData(cmdThrottle);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Time Run with MIL On"
         request="0x01 0x4D" response.prefix="0x41 0x4D" response.bytes="2">
         <script>
            <![CDATA[
               var milTime = new NumericalDataObj();
               milTime.units = "minutes";
               milTime.min = 0;
               milTime.max = 65535;
               milTime.value = (BYTE(0)*256)+BYTE(1);
               saveNumericalData(milTime);
            ]]>
         </script>
      </parameter>

      <parameter name="Time Since Trouble Codes Cleared"
         request="0x01 0x4E" response.prefix="0x41 0x4E" response.bytes="2">
         <script>
            <![CDATA[
               var milTime = new NumericalDataObj();
               milTime.units = "minutes";
               milTime.min = 0;
               milTime.max = 65535;
               milTime.value = (BYTE(0)*256)+BYTE(1);
               saveNumericalData(milTime);
            ]]>
         </script>
      </parameter>

      <parameter name="Maximum Value for Equivalence Ratio, Oxygen Sensor Voltage, Oxygen Sensor Current, and Intake Manifold Absolute Pressure"
         request="0x01 0x4F" response.prefix="0x41 0x4F" response.bytes="4">
         <script>
            <![CDATA[
               var ratio = new NumericalDataObj();
               ratio.units = "ratio";
               ratio.min = 0; 
               ratio.max = "255";
               ratio.value = BYTE(0);
               saveNumericalData(ratio);
               
               var voltage = new NumericalDataObj();
               voltage.units = "V";
               voltage.min = 0; 
               voltage.max = "255";
               voltage.value = BYTE(1);
               saveNumericalData(voltage);
               
               var current = new NumericalDataObj();
               current.units = "mA";
               current.min = 0; 
               current.max = "255";
               current.value = BYTE(2);
               saveNumericalData(current);
               
               var imap = new NumericalDataObj();
               imap.units = "kPa";
               imap.min = 0; 
               imap.max = "2550";
               imap.value = BYTE(3)*10;
               saveNumericalData(imap);
            ]]>
         </script>
      </parameter>

      <parameter name="Maximum value for Air Flow Rate from Mass Air Flow Sensor"
         request="0x01 0x50" response.prefix="0x41 0x50" response.bytes="4">
         <script>
            <![CDATA[
            var maxMAFAirFlow = new NumericalDataObj();
            maxMAFAirFlow.units = "g/s";
            maxMAFAirFlow.min = 0; 
            maxMAFAirFlow.max = "2550";
            maxMAFAirFlow.value = BYTE(0)*10;
            saveNumericalData(maxMAFAirFlow);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Fuel Type"
         request="0x01 0x51" response.prefix="0x41 0x51" response.bytes="1">
         <script>
            <![CDATA[            
            var listFuelTypes = ["Gasoline",
                                 "Methanol",
                                 "Ethanol",
                                 "Diesel",
                                 "LPG",                     // LPG - liquified petroleum gas
                                 "CNG",                     // CNG - compressed natural gas
                                 "Propane",
                                 "Electric",
                                 "Bifuel running Gasoline",
                                 "Bifuel running Methanol",
                                 "Bifuel running LPG",
                                 "Bifuel running CNG",
                                 "Bifuel running Propane",
                                 "Bifuel running Electricity",
                                 "Bifuel Mixed Gas/Electric",
                                 "Hybrid Gasoline", 
                                 "Hybrid Ethanol",
                                 "Hybrid Diesel", 
                                 "Hybrid Electric", 
                                 "Hybrid Mixed Fuel", 
                                 "Hybrid Regenrative"];                                 
            for(var i=0; i < 0x16; i++)
            {
               if(BYTE(0) == i)
               {
                  var fuelType = new LiteralDataObj();
                  fuelType.value = true;
                  fuelType.valueIfTrue = listFuelTypes[i];
                  saveLiteralData(fuelType);
               }
            }            
            ]]>
         </script>
      </parameter>
      
      <parameter name="Ethanol Fuel %"
         request="0x01 0x52" response.prefix="0x41 0x52" response.bytes="1">
         <script>
            <![CDATA[
            var ethFuel = new NumericalDataObj();
            ethFuel.units = "%";
            ethFuel.min = 0;
            ethFuel.max = 100;
            ethFuel.value = BYTE(0)*100/255;
            saveNumericalData(ethFuel);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Absolute Evaporative System Vapour Pressure"
         request="0x01 0x53" response.prefix="0x41 0x53" response.bytes="2">
         <script>
            <![CDATA[
            var numData = new NumericalDataObj();
            numData.units = "kPa";
            numData.min = 0;
            numData.max = 327.675;
            numData.value = ((BYTE(0)*256)+BYTE(1))*0.005;
            saveNumericalData(numData);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Evaporative System Vapour Pressure (2)"
         request="0x01 0x54" response.prefix="0x41 0x54" response.bytes="2">
         <!--  A is signed with (I THINK) 2's complement - needs to be VERIFIED
               min, max are different than values listed on Wikipedia since they don't
               make sense to me if the value is signed with 2's complement  -->
         <script>
            <![CDATA[
            if(BIT(0,7))
            {
               var numData = new NumericalDataObj();
               numData.units = "Pa";
               numData.min = -32768;
               numData.max = 32767;
               numData.value = ((~(BYTE(0)-1))*256)+BYTE(1);
               saveNumericalData(numData);
            }
            else
            {
               var numData = new NumericalDataObj();
               numData.units = "Pa";
               numData.min = -32768;
               numData.max = 32767;
               numData.value = (BYTE(0)*256)+BYTE(1);
               saveNumericalData(numData);                  
            }
            ]]>
         </script>
      </parameter>
      
      <parameter name="Short Term Secondary Oxygen Sensor Fuel Trim - Bank 1 [and Bank 3]"
         request="0x01 0x55" response.prefix="0x41 0x55">
         <script>
            <![CDATA[
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 99.22;
            fuelTrim.value = (BYTE(0)-128)*100/128;
            saveNumericalData(fuelTrim);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Long Term Secondary Oxygen Sensor Fuel Trim - Bank 1 [and Bank 3]"
         request="0x01 0x56" response.prefix="0x41 0x56">
         <script>
            <![CDATA[
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 99.22;
            fuelTrim.value = (BYTE(0)-128)*100/128;
            saveNumericalData(fuelTrim);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Short Term Secondary Oxygen Sensor Fuel Trim - Bank 2 [and Bank 4]"
         request="0x01 0x57" response.prefix="0x41 0x57">
         <script>
            <![CDATA[
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 99.22;
            fuelTrim.value = (BYTE(0)-128)*100/128;
            saveNumericalData(fuelTrim);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Long Term Secondary Oxygen Sensor Fuel Trim - Bank 2 [and Bank 4]"
         request="0x01 0x58" response.prefix="0x41 0x58">
         <script>
            <![CDATA[
            var fuelTrim = new NumericalDataObj();
            fuelTrim.units = "%";
            fuelTrim.min = -100;
            fuelTrim.max = 99.22;
            fuelTrim.value = (BYTE(0)-128)*100/128;
            saveNumericalData(fuelTrim);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Fuel Rail Pressure (Absolute)"
         request="0x01 0x59" response.prefix="0x41 0x59" response.bytes="2">
         <script>
            <![CDATA[
            var fuelRail = new NumericalDataObj();
            fuelRail.units = "kPa";
            fuelRail.min = 0;
            fuelRail.max = 655350;
            fuelRail.value = ((BYTE(0)*256)+BYTE(1))*10;
            saveNumericalData(fuelRail);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Relative Accelerator Pedal Position"
         request="0x01 0x5A" response.prefix="0x41 0x5A" response.bytes="1">
         <script>
            <![CDATA[
            var gasPedalPosn = new NumericalDataObj();
            gasPedalPosn.units = "%";
            gasPedalPosn.min = 0;
            gasPedalPosn.max = 100;
            gasPedalPosn.value = BYTE(0)*100/255;
            saveNumericalData(gasPedalPosn);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Hybrid Battery Pack Remaining Life"
         request="0x01 0x5B" response.prefix="0x41 0x5B" response.bytes="1">
         <script>
            <![CDATA[
            var battLife = new NumericalDataObj();
            battLife.units = "%";
            battLife.min = 0;
            battLife.max = 100;
            battLife.value = BYTE(0)*100/255;
            saveNumericalData(battLife);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Engine Oil Temperature" 
         request="0x01 0x5C" response.prefix="0x41 0x5C" response.bytes="1">
         <script>
            <![CDATA[
            var engOilTemp = new NumericalDataObj();
            engOilTemp.units = "C";
            engOilTemp.min = -40;
            engOilTemp.max = 210;
            engOilTemp.value = BYTE(0)-40;
            saveNumericalData(engOilTemp);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Fuel Injection Timing" 
         request="0x01 0x5D" response.prefix="0x41 0x5D" response.bytes="2">
         <script>
            <![CDATA[
            var fuelInjTiming = new NumericalDataObj();
            fuelInjTiming.units = "degrees";
            fuelInjTiming.min = -210;
            fuelInjTiming.max = 301.992;
            fuelInjTiming.value = (((BYTE(0)*256)+BYTE(1))-26880)/128;
            saveNumericalData(fuelInjTiming);
            ]]>
         </script>
      </parameter>
      
      <parameter name="Engine Fuel Rate" 
         request="0x01 0x5E" response.prefix="0x41 0x5E" response.bytes="2">
         <script>
            <![CDATA[
            var fuelRate = new NumericalDataObj();
            fuelRate.units = "L/h";
            fuelRate.min = 0;
            fuelRate.max = 3212.75;
            fuelRate.value = ((BYTE(0)*256)+BYTE(1))*0.05;
            saveNumericalData(fuelRate);
            ]]>
         </script>
      </parameter>
   
      <!-- END MODE $01 PIDs -->
      
      <!-- START MODE $02 PIDs -->
      <parameter name="Freeze Frame Diagnostic Trouble Code"
         request="0x02 0x02 0x00" response.prefix="0x42 0x02 0x00">
         <!--  0x02 0x02 0x00 returns the DTC which caused the freeze frame data
               available in Mode $02 to be saved. Freeze frame 0x00 is the
               generic frame set by default - any other frames set are
               manufacturer specific, so we request 0x00.
               
               Note: If nothing is returned, it may indicate that no freeze
                     frame data is available -->
         <script>
            <![CDATA[
            if(!(BYTE(0) || BYTE(1)))
            {
               var dtcData = new LiteralDataObj();
               dtcData.valueIfTrue = "No DTCs Stored";
               dtcData.value = true;
               saveLiteralData(dtcData);
            }
            else
            {
               var dtcData = new LiteralDataObj();
               dtcData.property = "Diagnostic Trouble Code";
               dtcData.value = true;
                  
               // DTC character 1
               if((BYTE(0) >> 6) == 0)          {   dtcData.valueIfTrue = "P";   }                  
               else if((BYTE(0) >> 6) == 1)     {   dtcData.valueIfTrue = "C";   }                  
               else if((BYTE(0) >> 6) == 2)     {   dtcData.valueIfTrue = "B";   }                  
               else if((BYTE(0) >> 6) == 3)     {   dtcData.valueIfTrue = "U";   }
                  
               dtcData.valueIfTrue += ((BYTE(0) >> 4) & 0x03).toString(16);  // DTC character 2
               dtcData.valueIfTrue += (BYTE(0) & 0x0F).toString(16);         // DTC character 3
               dtcData.valueIfTrue += (BYTE(1) >> 4).toString(16);           // DTC character 4
               dtcData.valueIfTrue += (BYTE(1) & 0x0F).toString(16);         // DTC character 5
               dtcData.valueIfTrue = dtcData.valueIfTrue.toUpperCase();
               saveLiteralData(dtcData);
            }
            ]]>         
         </script>
      </parameter>
      <!-- END MODE $02 PIDs --> 
      
      <!-- START MODE $03 -->
      <parameter name="Request Stored Diagnostic Trouble Codes"
         request="0x03" response.prefix="0x43">

         <!--  Mode $03 is to request stored DTCs. The vehicle returns 2*N bytes excluding
               the response prefix, with each set of 2 bytes specifying a single DTC.
               If no DTCs are stored, the vehicle might respond with (0x00 0x00) for each
               possible DTC that would fit into a frame (3 DTCs, 6 bytes all 0x00 in a
               single standard OBD frame), or the vehicle may not respond at all. -->

         <script protocols="SAE J1850 JPW, SAE J1850 PWM, ISO 9141-2, ISO 14230">
            <![CDATA[
            if((BYTE(0) == 0) && (BYTE(1) == 0))
            {
               var dtcData = new LiteralDataObj();
               dtcData.valueIfTrue = "No DTCs Stored";
               dtcData.value = true;
               saveLiteralData(dtcData);
            }
            else
            {
               for(var i=0; i < LENGTH(); i+=2)
               {  
                  if((BYTE(i) == 0) && (BYTE(i+1) == 0))
                  {   break;   }

                  var dtcData = new LiteralDataObj();
                  dtcData.property = "Diagnostic Trouble Code";
                  dtcData.value = true;
                  
                  // DTC character 1
                  if((BYTE(i) >> 6) == 0)          {   dtcData.valueIfTrue = "P";   }                  
                  else if((BYTE(i) >> 6) == 1)     {   dtcData.valueIfTrue = "C";   }                  
                  else if((BYTE(i) >> 6) == 2)     {   dtcData.valueIfTrue = "B";   }                  
                  else if((BYTE(i) >> 6) == 3)     {   dtcData.valueIfTrue = "U";   }
                  
                  dtcData.valueIfTrue += ((BYTE(i) >> 4) & 0x03).toString(16);    // DTC character 2
                  dtcData.valueIfTrue += (BYTE(i) & 0x0F).toString(16);           // DTC character 3
                  dtcData.valueIfTrue += (BYTE(i+1) >> 4).toString(16);           // DTC character 4
                  dtcData.valueIfTrue += (BYTE(i+1) & 0x0F).toString(16);         // DTC character 5
                  dtcData.valueIfTrue = dtcData.valueIfTrue.toUpperCase();
                  saveLiteralData(dtcData);
               }
            }
            ]]>
         </script>
               
         <script protocols="ISO 15765 Standard Id, ISO 15765 Extended Id">
            <![CDATA[
            // for ISO 15765-4, the first byte indicates 
            // the number of DTCs stored
            if(BYTE(0) == 0)
            {
               var dtcData = new LiteralDataObj();
               dtcData.valueIfTrue = "No DTCs Stored";
               dtcData.value = true;
               saveLiteralData(dtcData);
            }
            else
            {
               for(var i=1; i < LENGTH(); i+=2)
               {  
                  if((BYTE(i) == 0) && (BYTE(i+1) == 0))
                  {   break;   }   // no more DTCs

                  var dtcData = new LiteralDataObj();
                  dtcData.property = "Diagnostic Trouble Code";
                  dtcData.value = true;
                  
                  // DTC character 1
                  if((BYTE(i) >> 6) == 0)          {   dtcData.valueIfTrue = "P";   }                  
                  else if((BYTE(i) >> 6) == 1)     {   dtcData.valueIfTrue = "C";   }                  
                  else if((BYTE(i) >> 6) == 2)     {   dtcData.valueIfTrue = "B";   }                  
                  else if((BYTE(i) >> 6) == 3)     {   dtcData.valueIfTrue = "U";   }
                  
                  dtcData.valueIfTrue += ((BYTE(i) >> 4) & 0x03).toString(16);    // DTC character 2
                  dtcData.valueIfTrue += (BYTE(i) & 0x0F).toString(16);           // DTC character 3
                  dtcData.valueIfTrue += (BYTE(i+1) >> 4).toString(16);           // DTC character 4
                  dtcData.valueIfTrue += (BYTE(i+1) & 0x0F).toString(16);         // DTC character 5
                  dtcData.valueIfTrue = dtcData.valueIfTrue.toUpperCase();
                  saveLiteralData(dtcData);
               }
            }
            ]]>
         </script>
      </parameter>
      <!-- END MODE 03 --> 
   </parameters>
</spec>
